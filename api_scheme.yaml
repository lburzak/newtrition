openapi: 3.0.0
info:
  version: 1.0.0
  title: newtrition
  description: Newtrition web app API
  contact:
    email: lukasz.burzak@pollub.edu.pl
    name: Łukasz Burzak
tags:
  - name: product
    description: Food product resources
  - name: auth
    description: Authentication
  - name: recipe
    description: Dish recipe resources
servers:
  - url: 'localhost:3000'
paths:
  /products:
    get:
      summary: Public products
      tags: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
      operationId: get-products
      description: Retrieves all public products
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Product'
        description: ''
  '/products/{productId}':
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
    get:
      summary: Product
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: get-products-productId
      description: Retrieves a product
    delete:
      tags:
        - product
      summary: Delete product
      operationId: delete-products-productId
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      description: Deletes a product
    put:
      summary: Replace product
      operationId: put-products-productId
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      description: Replaces all product data while retaining ID
  '/products/{productId}/publicity':
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
    put:
      summary: Change product publicity
      operationId: put-products-productId-publicity
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      description: Change product visibility status
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        description: ''
  '/products/{productId}/photos/{photoId}':
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
      - schema:
          type: string
        name: photoId
        in: path
        required: true
    get:
      summary: Product photo
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: get-product-photo
      description: Retrieves a product photo
  '/users/{username}':
    parameters:
      - schema:
          type: string
          pattern: '^([A-Za-z\-]+)|@me'
        name: username
        in: path
        required: true
        description: Username or "@me"
    get:
      summary: User
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: get-users-userId
      description: 'Get user by username. If "@me" is passed, responds with authenticated user.'
    delete:
      tags:
        - auth
      summary: Terminate account
      operationId: delete-users-userId
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      description: Delete user
  '/users/{username}/products':
    parameters:
      - schema:
          type: string
        name: username
        in: path
        required: true
    get:
      summary: User products
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
      operationId: get-users-userId-products
      description: Retrieves products that were created by a user
    post:
      tags:
        - product
      summary: Create product
      operationId: post-users-userId-products
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
      description: Creates a private product with user as an author
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  ean: '0117492487025'
                  name: Masło roślinne
                  commonName: margaryna
                  portions:
                    - value: 100
                      unit: gram
                      nutritionFacts:
                        calories: 340
              properties:
                ean:
                  type: string
                  minLength: 1
                name:
                  type: string
                  minLength: 1
                nutritionFacts:
                  $ref: '#/components/schemas/NutritionFacts'
                classes:
                  type: array
                  items:
                    type: string
              required:
                - name
            examples: {}
      parameters: []
  '/users/{username}/recipes':
    parameters:
      - schema:
          type: string
        name: username
        in: path
        required: true
    get:
      summary: User recipes
      tags: []
      operationId: get-user-userId-recipes
      description: Retrieves recipes belonging to a user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '401':
          description: Forbidden
    post:
      tags:
        - recipe
      summary: Create recipe
      operationId: post-user-userId-recipes
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
      description: 'Creates a private recipe, with user as an author'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                steps:
                  type: array
                  items:
                    type: string
                ingredients:
                  type: array
                  items:
                    type: object
                    properties:
                      class:
                        type: string
                      amount:
                        type: integer
                      unit:
                        type: string
                        default: g
                    required:
                      - class
                      - amount
              required:
                - name
                - steps
                - ingredients
            examples:
              Ravioli recipe:
                value:
                  name: Ravioli
                  steps:
                    - Mound the flour and salt together and form a well.
                    - Beat the eggs in a bowl.
                  ingredients:
                    - class: flour
                      amount: 120
                    - class: egg
                      amount: 36
        description: Properties of a recipe to be created
  /recipes:
    get:
      summary: Public recipes
      tags:
        - recipe
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '401':
          description: Unauthorized
      operationId: get-recipes
      description: Retrieves recipes available publicly
  '/recipes/{recipeId}/publicity':
    parameters:
      - schema:
          type: string
        name: recipeId
        in: path
        required: true
    put:
      summary: Change recipe publicity
      operationId: put-recipes-productId-publicity
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      description: Change recipe visibility status
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        description: ''
  '/recipes/{productId}/photos/{photoId}':
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
      - schema:
          type: string
        name: photoId
        in: path
        required: true
    get:
      summary: Get recipe photo
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: get-product-photo
      description: Retrieves a product photo
  /auth/token:
    parameters: []
    post:
      summary: Generate token
      operationId: post-auth-token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    $ref: '#/components/schemas/Token'
        '401':
          description: Unauthorized
      description: Provides a fresh access token
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                refreshToken:
                  $ref: '#/components/schemas/Token'
      tags:
        - auth
  /auth:
    parameters: []
    post:
      summary: Generate tokens
      operationId: post-auth-refresh-token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    $ref: '#/components/schemas/Token'
                  refreshToken:
                    $ref: '#/components/schemas/Token'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      description: Provides fresh tokens
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
        description: ''
  /auth/signup:
    post:
      summary: Your GET endpoint
      tags:
        - auth
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ValidationError'
        '409':
          description: User already exists
      operationId: get-auth-signup
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  pattern: '^([A-Za-z\-]+)'
                  minLength: 2
                  maxLength: 40
                password:
                  type: string
                  minLength: 5
                  maxLength: 64
              required:
                - username
                - password
      description: Create account
      security: []
  /products/classes:
    get:
      summary: Get products classes
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductClass'
              examples: {}
        '401':
          description: Unauthorized
      operationId: get-products-classes
      description: Returns classes of all products available to authenticated user
components:
  schemas:
    Product:
      type: object
      description: A food product
      x-examples: {}
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          description: Official product name; Often associated with EAN
        ean:
          type: string
          minLength: 7
          maxLength: 13
          description: EAN-13 code associated with the product
        nutritionFacts:
          $ref: '#/components/schemas/NutritionFacts'
        public:
          type: boolean
          default: null
          description: 'Specifies, whether a product is available publicly. Can be ommitted if false.'
          nullable: true
        classes:
          type: array
          items:
            type: string
        photosCount:
          type: number
      required:
        - id
        - name
        - classes
    User:
      title: User
      type: object
      properties:
        username:
          type: string
      required:
        - username
    NutritionFacts:
      description: Nutrition facts of a product per 100g.
      type: object
      x-examples:
        example-1:
          calories: 340
          sodium: 0.586
          carbohydrate: 80.1
          fat: 3.4
          protein: 10.1
      properties:
        calories:
          type: number
          description: Amount of calories per reference portion
        sodium:
          type: number
          description: Weight of sodium per reference portion. In Grams.
        carbohydrate:
          type: number
          description: Weight of carbohydrates per reference portion. In Grams.
        fat:
          type: number
          description: Weight of fat per reference portion. In Grams.
        protein:
          type: number
          description: Weight of protein per reference portion. In Grams.
      required:
        - calories
    ValidationError:
      title: ValidationError
      type: object
      description: An error that occurs when passed data does not conform to validity rules
      properties:
        field:
          type: string
          description: 'The name of a field, that produced an error'
        message:
          type: string
          description: Error message
      required:
        - message
    Portion:
      title: Portion
      type: object
      description: Measurable portion of a product
      properties:
        unit:
          $ref: '#/components/schemas/Unit'
        amount:
          type: number
          description: Value of a portion unit
      required:
        - unit
        - amount
    Recipe:
      title: Recipe
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          description: Recipe name given by an author
        author:
          type: string
          description: Username of a recipe author
        ingredients:
          type: array
          description: Dish ingredients
          items:
            $ref: '#/components/schemas/Ingredient'
        steps:
          type: array
          items:
            type: string
      required:
        - name
        - author
        - ingredients
      x-examples: {}
    Id:
      type: integer
      title: Id
      format: int64
      description: Resource ID. Unique among resources of the same type.
    Ingredient:
      title: Ingredient
      type: object
      description: A portion of a specified product
      properties:
        productClass:
          $ref: '#/components/schemas/ProductClass'
        portion:
          $ref: '#/components/schemas/Portion'
      required:
        - productClass
        - portion
      x-examples: {}
    Token:
      type: string
      title: Token
      description: Authentication token
      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3R1c2VyIiwiaWF0IjoxNjM0ODA0MTk4fQ.R8XS2yPy5z0CTPU0EZ2b3QrpXM4OOBlishm6qqnEOTk
    Credentials:
      title: Credentials
      type: object
      description: User credentials
      properties:
        username:
          type: string
        password:
          type: string
    Error:
      title: Error
      type: object
      properties:
        message:
          type: string
      description: ''
    ProductClass:
      title: ProductClass
      type: object
      description: Products superset. Used in recipes to allow for replacements.
      properties:
        name:
          type: string
        measurementUnits:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Unit'
      required:
        - name
        - measurementUnits
    Unit:
      title: Unit
      type: string
  securitySchemes:
    TokenAuth:
      type: http
      scheme: bearer
  responses: {}
security:
  - BasicAuth: []
