openapi: 3.0.0
info:
  version: 1.0.0
  title: newtrition
  description: Newtrition web app API
  contact:
    email: lukasz.burzak@pollub.edu.pl
    name: Łukasz Burzak
tags:
  - name: product
    description: Food product resources
  - name: auth
    description: Authentication
  - name: recipe
    description: Dish recipe resources
servers:
  - url: 'localhost:3000'
paths:
  /products:
    get:
      summary: Public products
      tags: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
      operationId: get-products
      description: Retrieves all public products
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Product'
        description: ''
  '/products/{productId}':
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
    get:
      summary: Product
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: get-products-productId
      description: Retrieves a product
    delete:
      tags:
        - product
      summary: Delete product
      operationId: delete-products-productId
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      description: Deletes a product
    patch:
      tags:
        - product
      summary: Modify product
      operationId: patch-products-productId
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      description: Modifies a product
  '/users/{username}':
    parameters:
      - schema:
          type: string
        name: username
        in: path
        required: true
    get:
      summary: User
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: get-users-userId
      description: Get user by ID
    delete:
      tags:
        - auth
      summary: Terminate account
      operationId: delete-users-userId
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      description: Delete user
  '/users/{username}/products':
    parameters:
      - schema:
          type: string
        name: username
        in: path
        required: true
    get:
      summary: User products
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
      operationId: get-users-userId-products
      description: Retrieves products that were created by a user
    post:
      tags:
        - product
      summary: Create product
      operationId: post-users-userId-products
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
      description: Creates a private product with user as an author
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  ean: '0117492487025'
                  name: Masło roślinne
                  commonName: margaryna
                  portions:
                    - value: 100
                      unit: gram
                      nutritionFacts:
                        calories: 340
              properties:
                ean:
                  type: string
                  minLength: 1
                name:
                  type: string
                  minLength: 1
                commonName:
                  type: string
                  minLength: 1
                portions:
                  type: array
                  uniqueItems: true
                  minItems: 1
                  items:
                    type: object
                    properties:
                      value:
                        type: number
                      unit:
                        type: string
                        minLength: 1
                      nutritionFacts:
                        type: object
                        properties:
                          calories:
                            type: number
                        required:
                          - calories
                    required:
                      - value
                      - unit
              required:
                - ean
                - name
                - commonName
                - portions
            examples: {}
      parameters: []
  '/users/{username}/recipes':
    parameters:
      - schema:
          type: string
        name: username
        in: path
        required: true
    get:
      summary: User recipes
      tags: []
      operationId: get-user-userId-recipes
      description: Retrieves recipes belonging to a user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '401':
          description: Forbidden
    post:
      tags:
        - recipe
      summary: Create recipe
      operationId: post-user-userId-recipes
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
      description: 'Creates a private recipe, with user as an author'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                ingredients:
                  type: array
                  items:
                    $ref: '#/components/schemas/Ingredient'
        description: Properties of a recipe to be created
  /users:
    post:
      tags:
        - auth
      summary: Create user
      operationId: post-users
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ValidationError'
        '409':
          description: User already exists
      description: Registers a new account
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      security: []
  /recipes:
    get:
      summary: Public recipes
      tags:
        - recipe
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '401':
          description: Unauthorized
      operationId: get-recipes
      description: Retrieves recipes available publicly
  /auth/token:
    parameters: []
    post:
      summary: Generate token
      operationId: post-auth-token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    $ref: '#/components/schemas/Token'
        '401':
          description: Unauthorized
      description: Provides a fresh access token
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                refreshToken:
                  $ref: '#/components/schemas/Token'
      tags:
        - auth
  /auth:
    parameters: []
    post:
      summary: Generate tokens
      operationId: post-auth-refresh-token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    $ref: '#/components/schemas/Token'
                  refreshToken:
                    $ref: '#/components/schemas/Token'
        '401':
          description: Unauthorized
      description: Provides fresh tokens
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
components:
  schemas:
    Product:
      type: object
      description: A food product
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          description: Official product name; Often associated with EAN
        commonName:
          type: string
          description: Common name; Can describe a wider range of products
        ean:
          type: string
          minLength: 7
          maxLength: 13
          description: EAN-13 code associated with the product
        nutritionFacts:
          $ref: '#/components/schemas/NutritionFacts'
        definedPortions:
          type: array
          description: Portions that are convenient for this specific product
          items:
            $ref: '#/components/schemas/Portion'
        public:
          type: boolean
          default: null
          description: 'Specifies, whether a product is available publicly. Can be ommitted if false.'
          nullable: true
      required:
        - id
        - name
        - definedPortions
    User:
      title: User
      type: object
      properties:
        username:
          type: string
      required:
        - username
    NutritionFacts:
      description: Nutrition facts of a product in a quantity defined by a reference portion
      type: object
      x-examples:
        example-1:
          calories: 340
          sodium: 0.586
          carbohydrate: 80.1
          fat: 3.4
          protein: 10.1
      properties:
        calories:
          type: number
          description: Amount of calories per reference portion
        sodium:
          type: number
          description: Weight of sodium per reference portion. In Grams.
        carbohydrate:
          type: number
          description: Weight of carbohydrates per reference portion. In Grams.
        fat:
          type: number
          description: Weight of fat per reference portion. In Grams.
        protein:
          type: number
          description: Weight of protein per reference portion. In Grams.
        referencePortion:
          $ref: '#/components/schemas/Portion'
    ValidationError:
      title: ValidationError
      type: object
      description: An error that occurs when passed data does not conform to validity rules
      properties:
        field:
          type: string
          description: 'The name of a field, that produced an error'
        message:
          type: string
          description: Error message
      required:
        - message
    Portion:
      title: Portion
      type: object
      description: Measurable portion of a product
      properties:
        unit:
          type: string
          description: Physical unit of portion value
        value:
          type: number
          description: Value of a portion unit
      required:
        - unit
        - value
    Recipe:
      title: Recipe
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          description: Recipe name given by an author
        author:
          type: string
          description: Username of a recipe author
        ingredients:
          type: array
          description: Dish ingredients
          items:
            $ref: '#/components/schemas/Ingredient'
      required:
        - name
        - author
        - ingredients
    Id:
      type: integer
      title: Id
      format: int64
      description: Resource ID. Unique among resources of the same type.
    Ingredient:
      title: Ingredient
      type: object
      description: A portion of a specified product
      properties:
        product:
          $ref: '#/components/schemas/Product'
        portion:
          $ref: '#/components/schemas/Portion'
      required:
        - product
        - portion
    Token:
      title: Token
      type: string
      description: Authentication token
    Credentials:
      title: Credentials
      type: object
      description: User credentials
      properties:
        username:
          type: string
        password:
          type: string
  securitySchemes:
    TokenAuth:
      type: http
      scheme: bearer
  responses: {}
security:
  - BasicAuth: []
